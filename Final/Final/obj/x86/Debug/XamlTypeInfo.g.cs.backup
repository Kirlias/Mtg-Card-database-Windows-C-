//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Final
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::Final.Final_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Final.Final_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Final.Final_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Final.Final_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[23];
            _typeNameTable[0] = "Final.CardPage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "Final.MainData";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "Final.LoadBtnCmd";
            _typeNameTable[6] = "Final.Card";
            _typeNameTable[7] = "System.Collections.ObjectModel.ObservableCollection`1<Final.Card>";
            _typeNameTable[8] = "System.Collections.ObjectModel.Collection`1<Final.Card>";
            _typeNameTable[9] = "String";
            _typeNameTable[10] = "Int32";
            _typeNameTable[11] = "System.Collections.Generic.List`1<String>";
            _typeNameTable[12] = "System.Collections.Generic.List`1<Final.Legality>";
            _typeNameTable[13] = "Final.Legality";
            _typeNameTable[14] = "System.Nullable`1<Boolean>";
            _typeNameTable[15] = "System.ValueType";
            _typeNameTable[16] = "System.Collections.Generic.List`1<Final.Ruling>";
            _typeNameTable[17] = "Final.Ruling";
            _typeNameTable[18] = "System.Collections.Generic.List`1<System.Nullable`1<Int32>>";
            _typeNameTable[19] = "System.Nullable`1<Int32>";
            _typeNameTable[20] = "Boolean";
            _typeNameTable[21] = "SQLite.Net.SQLiteConnection";
            _typeNameTable[22] = "Final.MainPage";

            _typeTable = new global::System.Type[23];
            _typeTable[0] = typeof(global::Final.CardPage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::Final.MainData);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::Final.LoadBtnCmd);
            _typeTable[6] = typeof(global::Final.Card);
            _typeTable[7] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Final.Card>);
            _typeTable[8] = typeof(global::System.Collections.ObjectModel.Collection<global::Final.Card>);
            _typeTable[9] = typeof(global::System.String);
            _typeTable[10] = typeof(global::System.Int32);
            _typeTable[11] = typeof(global::System.Collections.Generic.List<global::System.String>);
            _typeTable[12] = typeof(global::System.Collections.Generic.List<global::Final.Legality>);
            _typeTable[13] = typeof(global::Final.Legality);
            _typeTable[14] = typeof(global::System.Nullable<global::System.Boolean>);
            _typeTable[15] = typeof(global::System.ValueType);
            _typeTable[16] = typeof(global::System.Collections.Generic.List<global::Final.Ruling>);
            _typeTable[17] = typeof(global::Final.Ruling);
            _typeTable[18] = typeof(global::System.Collections.Generic.List<global::System.Nullable<global::System.Int32>>);
            _typeTable[19] = typeof(global::System.Nullable<global::System.Int32>);
            _typeTable[20] = typeof(global::System.Boolean);
            _typeTable[21] = typeof(global::SQLite.Net.SQLiteConnection);
            _typeTable[22] = typeof(global::Final.MainPage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_CardPage() { return new global::Final.CardPage(); }
        private object Activate_3_MainData() { return new global::Final.MainData(); }
        private object Activate_6_Card() { return new global::Final.Card(); }
        private object Activate_7_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Final.Card>(); }
        private object Activate_8_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Final.Card>(); }
        private object Activate_11_List() { return new global::System.Collections.Generic.List<global::System.String>(); }
        private object Activate_12_List() { return new global::System.Collections.Generic.List<global::Final.Legality>(); }
        private object Activate_13_Legality() { return new global::Final.Legality(); }
        private object Activate_16_List() { return new global::System.Collections.Generic.List<global::Final.Ruling>(); }
        private object Activate_17_Ruling() { return new global::Final.Ruling(); }
        private object Activate_18_List() { return new global::System.Collections.Generic.List<global::System.Nullable<global::System.Int32>>(); }
        private object Activate_22_MainPage() { return new global::Final.MainPage(); }
        private void VectorAdd_7_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Final.Card>)instance;
            var newItem = (global::Final.Card)item;
            collection.Add(newItem);
        }
        private void VectorAdd_8_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Final.Card>)instance;
            var newItem = (global::Final.Card)item;
            collection.Add(newItem);
        }
        private void VectorAdd_11_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }
        private void VectorAdd_12_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Final.Legality>)instance;
            var newItem = (global::Final.Legality)item;
            collection.Add(newItem);
        }
        private void VectorAdd_16_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Final.Ruling>)instance;
            var newItem = (global::Final.Ruling)item;
            collection.Add(newItem);
        }
        private void VectorAdd_18_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Nullable<global::System.Int32>>)instance;
            var newItem = (global::System.Nullable<global::System.Int32>)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Final.Final_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Final.Final_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Final.CardPage
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_CardPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Final.Final_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Final.Final_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Final.MainData
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_MainData;
                userType.AddMemberName("LoadBtnCmd");
                userType.AddMemberName("CurrentCard");
                userType.AddMemberName("Cards");
                userType.AddMemberName("CardName");
                userType.AddMemberName("SelectedCard");
                userType.AddMemberName("DbConnection");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::Final.Final_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Final.LoadBtnCmd
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  Final.Card
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_Card;
                userType.AddMemberName("name");
                userType.AddMemberName("manaCost");
                userType.AddMemberName("cmc");
                userType.AddMemberName("colors");
                userType.AddMemberName("colorsBlobbed");
                userType.AddMemberName("colorIdentity");
                userType.AddMemberName("colorIdentityBlobbed");
                userType.AddMemberName("type");
                userType.AddMemberName("types");
                userType.AddMemberName("typesBlobbed");
                userType.AddMemberName("subtypes");
                userType.AddMemberName("subtypesBlobbed");
                userType.AddMemberName("rarity");
                userType.AddMemberName("set");
                userType.AddMemberName("setName");
                userType.AddMemberName("text");
                userType.AddMemberName("flavor");
                userType.AddMemberName("artist");
                userType.AddMemberName("power");
                userType.AddMemberName("toughness");
                userType.AddMemberName("layout");
                userType.AddMemberName("multiverseid");
                userType.AddMemberName("imageUrl");
                userType.AddMemberName("printings");
                userType.AddMemberName("printingsBlobbed");
                userType.AddMemberName("originalText");
                userType.AddMemberName("originalType");
                userType.AddMemberName("legalities");
                userType.AddMemberName("id");
                userType.AddMemberName("reserved");
                userType.AddMemberName("rulings");
                userType.AddMemberName("rulingsBlobbed");
                userType.AddMemberName("supertypes");
                userType.AddMemberName("supertypesBlobbed");
                userType.AddMemberName("variations");
                userType.AddMemberName("variationsBlobbed");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  System.Collections.ObjectModel.ObservableCollection`1<Final.Card>
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Final.Card>"));
                userType.CollectionAdd = VectorAdd_7_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  System.Collections.ObjectModel.Collection`1<Final.Card>
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_Collection;
                userType.CollectionAdd = VectorAdd_8_Collection;
                xamlType = userType;
                break;

            case 9:   //  String
                xamlType = new global::Final.Final_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Int32
                xamlType = new global::Final.Final_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  System.Collections.Generic.List`1<String>
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_11_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 12:   //  System.Collections.Generic.List`1<Final.Legality>
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_12_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 13:   //  Final.Legality
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_13_Legality;
                userType.AddMemberName("format");
                userType.AddMemberName("legality");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  System.Nullable`1<Boolean>
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  System.ValueType
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 16:   //  System.Collections.Generic.List`1<Final.Ruling>
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_16_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Final.Ruling
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_17_Ruling;
                userType.AddMemberName("date");
                userType.AddMemberName("text");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  System.Collections.Generic.List`1<System.Nullable`1<Int32>>
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_18_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  System.Nullable`1<Int32>
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("HasValue");
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 20:   //  Boolean
                xamlType = new global::Final.Final_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  SQLite.Net.SQLiteConnection
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  Final.MainPage
                userType = new global::Final.Final_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_MainData_LoadBtnCmd(object instance)
        {
            var that = (global::Final.MainData)instance;
            return that.LoadBtnCmd;
        }
        private object get_1_MainData_CurrentCard(object instance)
        {
            var that = (global::Final.MainData)instance;
            return that.CurrentCard;
        }
        private void set_1_MainData_CurrentCard(object instance, object Value)
        {
            var that = (global::Final.MainData)instance;
            that.CurrentCard = (global::Final.Card)Value;
        }
        private object get_2_MainData_Cards(object instance)
        {
            var that = (global::Final.MainData)instance;
            return that.Cards;
        }
        private void set_2_MainData_Cards(object instance, object Value)
        {
            var that = (global::Final.MainData)instance;
            that.Cards = (global::System.Collections.ObjectModel.ObservableCollection<global::Final.Card>)Value;
        }
        private object get_3_Card_name(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.name;
        }
        private void set_3_Card_name(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.name = (global::System.String)Value;
        }
        private object get_4_Card_manaCost(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.manaCost;
        }
        private void set_4_Card_manaCost(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.manaCost = (global::System.String)Value;
        }
        private object get_5_Card_cmc(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.cmc;
        }
        private void set_5_Card_cmc(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.cmc = (global::System.Int32)Value;
        }
        private object get_6_Card_colors(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.colors;
        }
        private void set_6_Card_colors(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.colors = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_7_Card_colorsBlobbed(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.colorsBlobbed;
        }
        private void set_7_Card_colorsBlobbed(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.colorsBlobbed = (global::System.String)Value;
        }
        private object get_8_Card_colorIdentity(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.colorIdentity;
        }
        private void set_8_Card_colorIdentity(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.colorIdentity = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_9_Card_colorIdentityBlobbed(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.colorIdentityBlobbed;
        }
        private void set_9_Card_colorIdentityBlobbed(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.colorIdentityBlobbed = (global::System.String)Value;
        }
        private object get_10_Card_type(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.type;
        }
        private void set_10_Card_type(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.type = (global::System.String)Value;
        }
        private object get_11_Card_types(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.types;
        }
        private void set_11_Card_types(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.types = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_12_Card_typesBlobbed(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.typesBlobbed;
        }
        private void set_12_Card_typesBlobbed(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.typesBlobbed = (global::System.String)Value;
        }
        private object get_13_Card_subtypes(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.subtypes;
        }
        private void set_13_Card_subtypes(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.subtypes = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_14_Card_subtypesBlobbed(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.subtypesBlobbed;
        }
        private void set_14_Card_subtypesBlobbed(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.subtypesBlobbed = (global::System.String)Value;
        }
        private object get_15_Card_rarity(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.rarity;
        }
        private void set_15_Card_rarity(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.rarity = (global::System.String)Value;
        }
        private object get_16_Card_set(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.set;
        }
        private void set_16_Card_set(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.set = (global::System.String)Value;
        }
        private object get_17_Card_setName(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.setName;
        }
        private void set_17_Card_setName(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.setName = (global::System.String)Value;
        }
        private object get_18_Card_text(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.text;
        }
        private void set_18_Card_text(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.text = (global::System.String)Value;
        }
        private object get_19_Card_flavor(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.flavor;
        }
        private void set_19_Card_flavor(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.flavor = (global::System.String)Value;
        }
        private object get_20_Card_artist(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.artist;
        }
        private void set_20_Card_artist(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.artist = (global::System.String)Value;
        }
        private object get_21_Card_power(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.power;
        }
        private void set_21_Card_power(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.power = (global::System.String)Value;
        }
        private object get_22_Card_toughness(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.toughness;
        }
        private void set_22_Card_toughness(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.toughness = (global::System.String)Value;
        }
        private object get_23_Card_layout(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.layout;
        }
        private void set_23_Card_layout(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.layout = (global::System.String)Value;
        }
        private object get_24_Card_multiverseid(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.multiverseid;
        }
        private void set_24_Card_multiverseid(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.multiverseid = (global::System.Int32)Value;
        }
        private object get_25_Card_imageUrl(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.imageUrl;
        }
        private void set_25_Card_imageUrl(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.imageUrl = (global::System.String)Value;
        }
        private object get_26_Card_printings(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.printings;
        }
        private void set_26_Card_printings(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.printings = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_27_Card_printingsBlobbed(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.printingsBlobbed;
        }
        private void set_27_Card_printingsBlobbed(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.printingsBlobbed = (global::System.String)Value;
        }
        private object get_28_Card_originalText(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.originalText;
        }
        private void set_28_Card_originalText(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.originalText = (global::System.String)Value;
        }
        private object get_29_Card_originalType(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.originalType;
        }
        private void set_29_Card_originalType(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.originalType = (global::System.String)Value;
        }
        private object get_30_Card_legalities(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.legalities;
        }
        private void set_30_Card_legalities(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.legalities = (global::System.Collections.Generic.List<global::Final.Legality>)Value;
        }
        private object get_31_Legality_format(object instance)
        {
            var that = (global::Final.Legality)instance;
            return that.format;
        }
        private void set_31_Legality_format(object instance, object Value)
        {
            var that = (global::Final.Legality)instance;
            that.format = (global::System.String)Value;
        }
        private object get_32_Legality_legality(object instance)
        {
            var that = (global::Final.Legality)instance;
            return that.legality;
        }
        private void set_32_Legality_legality(object instance, object Value)
        {
            var that = (global::Final.Legality)instance;
            that.legality = (global::System.String)Value;
        }
        private object get_33_Card_id(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.id;
        }
        private void set_33_Card_id(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.id = (global::System.String)Value;
        }
        private object get_34_Card_reserved(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.reserved;
        }
        private void set_34_Card_reserved(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.reserved = (global::System.Nullable<global::System.Boolean>)Value;
        }
        private object get_35_Card_rulings(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.rulings;
        }
        private void set_35_Card_rulings(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.rulings = (global::System.Collections.Generic.List<global::Final.Ruling>)Value;
        }
        private object get_36_Ruling_date(object instance)
        {
            var that = (global::Final.Ruling)instance;
            return that.date;
        }
        private void set_36_Ruling_date(object instance, object Value)
        {
            var that = (global::Final.Ruling)instance;
            that.date = (global::System.String)Value;
        }
        private object get_37_Ruling_text(object instance)
        {
            var that = (global::Final.Ruling)instance;
            return that.text;
        }
        private void set_37_Ruling_text(object instance, object Value)
        {
            var that = (global::Final.Ruling)instance;
            that.text = (global::System.String)Value;
        }
        private object get_38_Card_rulingsBlobbed(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.rulingsBlobbed;
        }
        private void set_38_Card_rulingsBlobbed(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.rulingsBlobbed = (global::System.String)Value;
        }
        private object get_39_Card_supertypes(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.supertypes;
        }
        private void set_39_Card_supertypes(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.supertypes = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_40_Card_supertypesBlobbed(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.supertypesBlobbed;
        }
        private void set_40_Card_supertypesBlobbed(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.supertypesBlobbed = (global::System.String)Value;
        }
        private object get_41_Card_variations(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.variations;
        }
        private void set_41_Card_variations(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.variations = (global::System.Collections.Generic.List<global::System.Nullable<global::System.Int32>>)Value;
        }
        private object get_42_Nullable_HasValue(object instance)
        {
            var that = (global::System.Nullable<global::System.Int32>)instance;
            return that.HasValue;
        }
        private object get_43_Nullable_Value(object instance)
        {
            var that = (global::System.Nullable<global::System.Int32>)instance;
            return that.Value;
        }
        private object get_44_Card_variationsBlobbed(object instance)
        {
            var that = (global::Final.Card)instance;
            return that.variationsBlobbed;
        }
        private void set_44_Card_variationsBlobbed(object instance, object Value)
        {
            var that = (global::Final.Card)instance;
            that.variationsBlobbed = (global::System.Nullable<global::System.Int32>)Value;
        }
        private object get_45_MainData_CardName(object instance)
        {
            var that = (global::Final.MainData)instance;
            return that.CardName;
        }
        private void set_45_MainData_CardName(object instance, object Value)
        {
            var that = (global::Final.MainData)instance;
            that.CardName = (global::System.String)Value;
        }
        private object get_46_MainData_SelectedCard(object instance)
        {
            var that = (global::Final.MainData)instance;
            return that.SelectedCard;
        }
        private void set_46_MainData_SelectedCard(object instance, object Value)
        {
            var that = (global::Final.MainData)instance;
            that.SelectedCard = (global::Final.Card)Value;
        }
        private object get_47_MainData_DbConnection(object instance)
        {
            var that = (global::Final.MainData)instance;
            return that.DbConnection;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Final.Final_XamlTypeInfo.XamlMember xamlMember = null;
            global::Final.Final_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Final.MainData.LoadBtnCmd":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.MainData");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "LoadBtnCmd", "Final.LoadBtnCmd");
                xamlMember.Getter = get_0_MainData_LoadBtnCmd;
                xamlMember.SetIsReadOnly();
                break;
            case "Final.MainData.CurrentCard":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.MainData");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "CurrentCard", "Final.Card");
                xamlMember.Getter = get_1_MainData_CurrentCard;
                xamlMember.Setter = set_1_MainData_CurrentCard;
                break;
            case "Final.MainData.Cards":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.MainData");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "Cards", "System.Collections.ObjectModel.ObservableCollection`1<Final.Card>");
                xamlMember.Getter = get_2_MainData_Cards;
                xamlMember.Setter = set_2_MainData_Cards;
                break;
            case "Final.Card.name":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "name", "String");
                xamlMember.Getter = get_3_Card_name;
                xamlMember.Setter = set_3_Card_name;
                break;
            case "Final.Card.manaCost":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "manaCost", "String");
                xamlMember.Getter = get_4_Card_manaCost;
                xamlMember.Setter = set_4_Card_manaCost;
                break;
            case "Final.Card.cmc":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "cmc", "Int32");
                xamlMember.Getter = get_5_Card_cmc;
                xamlMember.Setter = set_5_Card_cmc;
                break;
            case "Final.Card.colors":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "colors", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_6_Card_colors;
                xamlMember.Setter = set_6_Card_colors;
                break;
            case "Final.Card.colorsBlobbed":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "colorsBlobbed", "String");
                xamlMember.Getter = get_7_Card_colorsBlobbed;
                xamlMember.Setter = set_7_Card_colorsBlobbed;
                break;
            case "Final.Card.colorIdentity":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "colorIdentity", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_8_Card_colorIdentity;
                xamlMember.Setter = set_8_Card_colorIdentity;
                break;
            case "Final.Card.colorIdentityBlobbed":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "colorIdentityBlobbed", "String");
                xamlMember.Getter = get_9_Card_colorIdentityBlobbed;
                xamlMember.Setter = set_9_Card_colorIdentityBlobbed;
                break;
            case "Final.Card.type":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "type", "String");
                xamlMember.Getter = get_10_Card_type;
                xamlMember.Setter = set_10_Card_type;
                break;
            case "Final.Card.types":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "types", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_11_Card_types;
                xamlMember.Setter = set_11_Card_types;
                break;
            case "Final.Card.typesBlobbed":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "typesBlobbed", "String");
                xamlMember.Getter = get_12_Card_typesBlobbed;
                xamlMember.Setter = set_12_Card_typesBlobbed;
                break;
            case "Final.Card.subtypes":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "subtypes", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_13_Card_subtypes;
                xamlMember.Setter = set_13_Card_subtypes;
                break;
            case "Final.Card.subtypesBlobbed":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "subtypesBlobbed", "String");
                xamlMember.Getter = get_14_Card_subtypesBlobbed;
                xamlMember.Setter = set_14_Card_subtypesBlobbed;
                break;
            case "Final.Card.rarity":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "rarity", "String");
                xamlMember.Getter = get_15_Card_rarity;
                xamlMember.Setter = set_15_Card_rarity;
                break;
            case "Final.Card.set":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "set", "String");
                xamlMember.Getter = get_16_Card_set;
                xamlMember.Setter = set_16_Card_set;
                break;
            case "Final.Card.setName":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "setName", "String");
                xamlMember.Getter = get_17_Card_setName;
                xamlMember.Setter = set_17_Card_setName;
                break;
            case "Final.Card.text":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "text", "String");
                xamlMember.Getter = get_18_Card_text;
                xamlMember.Setter = set_18_Card_text;
                break;
            case "Final.Card.flavor":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "flavor", "String");
                xamlMember.Getter = get_19_Card_flavor;
                xamlMember.Setter = set_19_Card_flavor;
                break;
            case "Final.Card.artist":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "artist", "String");
                xamlMember.Getter = get_20_Card_artist;
                xamlMember.Setter = set_20_Card_artist;
                break;
            case "Final.Card.power":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "power", "String");
                xamlMember.Getter = get_21_Card_power;
                xamlMember.Setter = set_21_Card_power;
                break;
            case "Final.Card.toughness":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "toughness", "String");
                xamlMember.Getter = get_22_Card_toughness;
                xamlMember.Setter = set_22_Card_toughness;
                break;
            case "Final.Card.layout":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "layout", "String");
                xamlMember.Getter = get_23_Card_layout;
                xamlMember.Setter = set_23_Card_layout;
                break;
            case "Final.Card.multiverseid":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "multiverseid", "Int32");
                xamlMember.Getter = get_24_Card_multiverseid;
                xamlMember.Setter = set_24_Card_multiverseid;
                break;
            case "Final.Card.imageUrl":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "imageUrl", "String");
                xamlMember.Getter = get_25_Card_imageUrl;
                xamlMember.Setter = set_25_Card_imageUrl;
                break;
            case "Final.Card.printings":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "printings", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_26_Card_printings;
                xamlMember.Setter = set_26_Card_printings;
                break;
            case "Final.Card.printingsBlobbed":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "printingsBlobbed", "String");
                xamlMember.Getter = get_27_Card_printingsBlobbed;
                xamlMember.Setter = set_27_Card_printingsBlobbed;
                break;
            case "Final.Card.originalText":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "originalText", "String");
                xamlMember.Getter = get_28_Card_originalText;
                xamlMember.Setter = set_28_Card_originalText;
                break;
            case "Final.Card.originalType":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "originalType", "String");
                xamlMember.Getter = get_29_Card_originalType;
                xamlMember.Setter = set_29_Card_originalType;
                break;
            case "Final.Card.legalities":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "legalities", "System.Collections.Generic.List`1<Final.Legality>");
                xamlMember.Getter = get_30_Card_legalities;
                xamlMember.Setter = set_30_Card_legalities;
                break;
            case "Final.Legality.format":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Legality");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "format", "String");
                xamlMember.Getter = get_31_Legality_format;
                xamlMember.Setter = set_31_Legality_format;
                break;
            case "Final.Legality.legality":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Legality");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "legality", "String");
                xamlMember.Getter = get_32_Legality_legality;
                xamlMember.Setter = set_32_Legality_legality;
                break;
            case "Final.Card.id":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "id", "String");
                xamlMember.Getter = get_33_Card_id;
                xamlMember.Setter = set_33_Card_id;
                break;
            case "Final.Card.reserved":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "reserved", "System.Nullable`1<Boolean>");
                xamlMember.Getter = get_34_Card_reserved;
                xamlMember.Setter = set_34_Card_reserved;
                break;
            case "Final.Card.rulings":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "rulings", "System.Collections.Generic.List`1<Final.Ruling>");
                xamlMember.Getter = get_35_Card_rulings;
                xamlMember.Setter = set_35_Card_rulings;
                break;
            case "Final.Ruling.date":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Ruling");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "date", "String");
                xamlMember.Getter = get_36_Ruling_date;
                xamlMember.Setter = set_36_Ruling_date;
                break;
            case "Final.Ruling.text":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Ruling");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "text", "String");
                xamlMember.Getter = get_37_Ruling_text;
                xamlMember.Setter = set_37_Ruling_text;
                break;
            case "Final.Card.rulingsBlobbed":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "rulingsBlobbed", "String");
                xamlMember.Getter = get_38_Card_rulingsBlobbed;
                xamlMember.Setter = set_38_Card_rulingsBlobbed;
                break;
            case "Final.Card.supertypes":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "supertypes", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_39_Card_supertypes;
                xamlMember.Setter = set_39_Card_supertypes;
                break;
            case "Final.Card.supertypesBlobbed":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "supertypesBlobbed", "String");
                xamlMember.Getter = get_40_Card_supertypesBlobbed;
                xamlMember.Setter = set_40_Card_supertypesBlobbed;
                break;
            case "Final.Card.variations":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "variations", "System.Collections.Generic.List`1<System.Nullable`1<Int32>>");
                xamlMember.Getter = get_41_Card_variations;
                xamlMember.Setter = set_41_Card_variations;
                break;
            case "System.Nullable`1<Int32>.HasValue":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Nullable`1<Int32>");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "HasValue", "Boolean");
                xamlMember.Getter = get_42_Nullable_HasValue;
                xamlMember.SetIsReadOnly();
                break;
            case "System.Nullable`1<Int32>.Value":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("System.Nullable`1<Int32>");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "Value", "Int32");
                xamlMember.Getter = get_43_Nullable_Value;
                xamlMember.SetIsReadOnly();
                break;
            case "Final.Card.variationsBlobbed":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.Card");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "variationsBlobbed", "System.Nullable`1<Int32>");
                xamlMember.Getter = get_44_Card_variationsBlobbed;
                xamlMember.Setter = set_44_Card_variationsBlobbed;
                break;
            case "Final.MainData.CardName":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.MainData");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "CardName", "String");
                xamlMember.Getter = get_45_MainData_CardName;
                xamlMember.Setter = set_45_MainData_CardName;
                break;
            case "Final.MainData.SelectedCard":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.MainData");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "SelectedCard", "Final.Card");
                xamlMember.Getter = get_46_MainData_SelectedCard;
                xamlMember.Setter = set_46_MainData_SelectedCard;
                break;
            case "Final.MainData.DbConnection":
                userType = (global::Final.Final_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Final.MainData");
                xamlMember = new global::Final.Final_XamlTypeInfo.XamlMember(this, "DbConnection", "SQLite.Net.SQLiteConnection");
                xamlMember.Getter = get_47_MainData_DbConnection;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Final.Final_XamlTypeInfo.XamlSystemBaseType
    {
        global::Final.Final_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Final.Final_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Final.Final_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Final.Final_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

